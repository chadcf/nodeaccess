<?php
/*
 * Notes:
 * 
 * - skip priority, it's been deprecated
 */
 
function nodeaccess_menu() {

  $items['admin/structure/types/manage/%node_type/nodeaccess'] = array(
    'title' => t('Permissions'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nodeaccess_admin_form', 4),
    'access callback' => 'user_access',
    'access arguments' => array('administer content types'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'nodeaccess.admin.inc'
  );

  $items['nodeaccess/usersearch'] = array(
    'page callback' => 'nodeaccess_usersearch',
    'type' => MENU_CALLBACK,
    'access callback' => 'user_access',
    'access arguments'  => array('')
  );
  
  return $items;
}

function nodeaccess_adming_settings_access() {
  return true;
}

function nodeaccess_permission() {
  return array(
    'administer nodeaccess' => array(
      'title' => t('Administer nodeaccess'),
      'description' => t('Administer global options for nodeaccess')
    ),
    'grant node permissions' => array(
      'title' => t('Grant node permissions'),
      'description' => t('May grant any permissions on a node')
    ),
    'grant editable node permissions' => array(
      'title' => t('Grant edit permissions on nodes')
    ),
    'grant deletable node permissions'  => array(
      'title' => t('Grant delete permissions on nodes')
    ),
    'grant own node permissions'  => array(
      'title' => t('Grant own permissions on nodes')
    )
  );
}

function nodeaccess_theme() {
  return array(
    'nodeaccess_grants' => array(
      'arguments' => array('form' => NULL)
    ),
    'nodeaccess_admin_roles' => array(
      'render element' => 'form',
      'template' => 'templates/admin_roles'
    ),
    'nodeaccess_admin_users' => array(
      'render element'  => 'form',
      'template'  => 'templates/admin_users'
    )
  );
}

function nodeaccess_node_form($form) {
  return 'foo';
}
/* hook_form_alter
 * 
 * Implement vertical tab for permissions
 */
function nodeaccess_form_node_form_alter(&$form, $form_state) {
  
  $form['nodeaccess'] = array(
    '#type'         => 'fieldset',
    '#access'       => user_access('grant node permissions'), // TODO: add in other perms
    '#title'        => 'Node Access',
    '#collapsible'  => TRUE,
    '#collapsed'    => TRUE,
    '#group'        => 'additional_settings',
    '#attached'     => array(
      'js'            => array(
                        'vertical-tabs' => drupal_get_path('module', 'nodeaccess') . 'nodeaccess-node-form.js'
                      )
    ),
    '#tree'         => TRUE,
    '#weight'       => 35,
    '#theme'        => 'nodeaccess_grants'
  );
  
  // summary
  $summary = "rwx by foobar";
   
  // get all roles
  $roles = user_roles();
     
  // which roles are configured to show up here?
  $allowed_roles = variable_get('nodeaccess-roles', $roles);
  
  // which grants are configured to show up here?
  $allowed_grants = variable_get('nodeaccess-grants', array('view' => 1, 'edit' => 1, 'delete' => 1));
  
  // If $preserve is true, the fields the user is not allowed to view or
  // edit are included in the form as hidden fields to preserve them.
  $preserve = variable_get('nodeaccess-preserve', 1);
    
  // print out roles table
  if ( is_array($roles) ) {
    $form['nodeaccess']['rid'] = array('#tree' => TRUE, '#title' => 'Roles', '#theme' => 'foobar');
    
    foreach( $roles as $id => $name ) {
      // do we include this role? 
      if ( isset( $allowed_roles[$id] ) ) {
        if ( $allowed_grants['view'] ) {
          $form['nodeaccess']['rid'][$id]['grant_view'] = array('#type' => 'checkbox', '#theme' => 'foobar');
        } else if ( $preserve ) {
          $form['nodeaccess']['rid'][$id]['grant_view'] = array('#type' => 'hidden');
        }
      
        if ( $allowed_grants['edit'] ) {
          $form['nodeaccess']['rid'][$id]['grant_edit'] = array('#type' => 'checkbox');
        } else if ( $preserve ) {
          $form['nodeaccess']['rid'][$id]['grant_edit'] = array('#type' => 'hidden');
        }
              
        if ( $allowed_grants['delete'] ) {
          $form['nodeaccess']['rid'][$id]['grant_delete'] = array('#type' => 'checkbox');
        } else if ( $preserve ) {
          $form['nodeaccess']['rid'][$id]['grant_delete'] = array('#type' => 'hidden');
        }
      } else if ($preserve) {
        //$form['rid'][$key]['name'] = array('#type' => 'hidden', '#value' => $field['name']);
        //$form['rid'][$key]['grant_view'] = array('#type' => 'hidden', '#value' => $field['grant_view']);
        //$form['rid'][$key]['grant_update'] = array('#type' => 'hidden', '#value' => $field['grant_update']);
        //$form['rid'][$key]['grant_delete'] = array('#type' => 'hidden', '#value' => $field['grant_delete']);
      }   
    }   
  }

  // print out user table
  
}

function theme_nodeaccess_grants($form) {
  return 'asdf';
}
/**
 * Theme function for nodeaccess_grants_form.
 */
function theme_nodeaccess_grants_form($form) {
  $allowed_roles = variable_get('nodeaccess-roles', array());
  $allowed_grants = variable_get('nodeaccess-grants', array());

  // Roles table.
  $roles = element_children($form['rid']);
  if (count($roles) && count($allowed_roles)) {
    $header = array();
    $header[] = t('Role');
    if ($allowed_grants['view']) {
      $header[] = t('View');
    }
    if ($allowed_grants['edit']) {
      $header[] = t('Edit');
    }
    if ($allowed_grants['delete']) {
      $header[] = t('Delete');
    }
    foreach ($roles as $key) {
      if ($allowed_roles[$key]) {
        $row = array();
        $row[] = $form['rid'][$key]['name']['#value'] . drupal_render($form['rid'][$key]['name']);
        if ($allowed_grants['view']) {
          $row[] = drupal_render($form['rid'][$key]['grant_view']);
        }
        if ($allowed_grants['edit']) {
          $row[] = drupal_render($form['rid'][$key]['grant_update']);
        }
        if ($allowed_grants['delete']) {
          $row[] = drupal_render($form['rid'][$key]['grant_delete']);
        }
        $rows[] = $row;
      }
    }
    $output .= theme('table', $header, $rows);
  }

  // Search form.
  $output .= '<p><div class="search-form">';
  $output .= '<strong>' . t('Enter names to search for users:') . '</strong>';
  $output .= '<div class="container-inline">';
  $output .= drupal_render($form['keys']);
  $output .= drupal_render($form['search']);
  $output .= '</div></div></p>';

  // Users table.
  unset($rows);
  $users = element_children($form['uid']);
  if (count($users) > 0) {
    $header = array();
    $header[] = t('User');
    $header[] = t('Keep?');
    if ($allowed_grants['view']) {
      $header[] = t('View');
    }
    if ($allowed_grants['edit']) {
      $header[] = t('Edit');
    }
    if ($allowed_grants['delete']) {
      $header[] = t('Delete');
    }
    foreach ($users as $key) {
      $row = array();
      $row[] = $form['uid'][$key]['name']['#value'];
      $row[] = drupal_render($form['uid'][$key]['keep']);
      if ($allowed_grants['view']) {
        $row[] = drupal_render($form['uid'][$key]['grant_view']);
      }
      if ($allowed_grants['edit']) {
        $row[] = drupal_render($form['uid'][$key]['grant_update']);
      }
      if ($allowed_grants['delete']) {
        $row[] = drupal_render($form['uid'][$key]['grant_delete']);
      }
      $rows[] = $row;
    }
    $output .= theme('table', $header, $rows);
  }

  $output .= drupal_render($form);

  return $output;
}
