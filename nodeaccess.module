<?php
// $Id: nodeaccess.module,v 1.4 2006/09/26 14:12:21 debtman7 Exp $

/**
 * Implementation of hook_help().
 */
function nodeaccess_help($section) {
  if ($section == 'admin/modules#description') {
    return t('Allows users to grant permissions to other users and roles.');
  }
  if (preg_match('|^node/\d+/grant|', $section)) {
    $message = t('You can set grants per users.');
    $message .= t(' You need to check the Keep checkbox if you want to keep the user for granting. Users with Keep checkbox checked remain in the user table between searches. Note that user rights are additional to those coming from roles.');
  }
}


/**
 * Implementation of hook_menu().
 */
function nodeaccess_menu($may_cache) {
  $items = array();
  if ($may_cache) {
    $items[] = array('path' => 'admin/settings/nodeaccess', 'title' => t('nodeaccess'),
      'callback' => 'nodeaccess_admin', 'access' => user_access('administer nodeaccess'));
  }
  else {
    if (arg(0) == 'node' && is_numeric(arg(1))) {
      $node = node_load(arg(1));
      $types = variable_get('nodeaccess-types', array());
      global $user;
      if ($node->nid && $types[$node->type] && (user_access('grant node permissions') || (user_access('grant own node permissions') && $node->uid == $user->uid))) {
        $items[] = array('path' => 'node/'. $node->nid .'/grant', 'title' => t('grant'),
          'callback' => 'nodeaccess_page', 'callback arguments' => $node->nid,
          'access' => nodeaccess_access('grant', $node),
          'weight' => 5,
          'type' => MENU_LOCAL_TASK);
      }
    }
  }
  return $items;
}

/**
 * Implementation of hook_perm().
 */
function nodeaccess_perm() {
  return array('administer nodeaccess', 'grant node permissions', 'grant own node permissions');
}

/**
 * Implementation of hook_access().
 */
function nodeaccess_access($op, $node) {
  global $user;

  if ($op == 'grant') {
    if (user_access('grant node permissions') || (user_access('grant own node permissions') && ($user->uid == $node->uid))) {
      return TRUE;
    }
  }
}

/**
 * Menu callback. Draws the page.
 */
function nodeaccess_page($nid) {
  $output = '';

  // build our form
  $edit = _nodeaccess_populate($nid);

	$roles = $edit['rid'];
  $users = $edit['uid'];

  $form['nid'] = array('#type' => 'value', '#value' => $nid);
	
  // roles table
  if (is_array($roles)) {
    $form['rid'] = array('#tree' => TRUE,);
    $allowed = variable_get('nodeaccess-roles', array());
    foreach ($roles as $key => $field) {
    if ($allowed[$key]) {
      $form['rid'][$key]['name'] = array('#type' => 'hidden', '#value' => $field['name'],);
      $form['rid'][$key]['grant_view'] = array('#type' => 'checkbox', '#default_value' => $field['grant_view']);
      $form['rid'][$key]['grant_update'] = array('#type' => 'checkbox', '#default_value' => $field['grant_update']);
      $form['rid'][$key]['grant_delete'] = array('#type' => 'checkbox', '#default_value' => $field['grant_delete']);
      }
    }
  }

  // users table
  if (is_array($users)) {
    $form['uid'] = array('#tree' => TRUE,);
    foreach ($users as $key => $field) {
      $form['uid'][$key]['name'] = array('#value' => $field['name'],);
      $form['uid'][$key]['keep'] = array('#type' => 'checkbox', '#default_value' => $field['keep']);
      $form['uid'][$key]['grant_view'] = array('#type' => 'checkbox', '#default_value' => $field['grant_view']);
      $form['uid'][$key]['grant_update'] = array('#type' => 'checkbox', '#default_value' => $field['grant_update']);
      $form['uid'][$key]['grant_delete'] = array('#type' => 'checkbox', '#default_value' => $field['grant_delete']);
    }
  }

  // deal with searching
  $form['old_keys'] = array('#type' => 'hidden', '#value' => $edit['keys']);
  $form['keys'] = array('#type' => 'textfield', '#default_value' => $edit['keys'], '#size' => 40, '#autocomplete_path' => 'user/autocomplete', );
  $form['search'] = array('#type' => 'button', '#value' => t('Search'));

  $form['submit'] = array('#type' => 'submit', '#value' => t('Save Grants'));
  $output .= drupal_get_form('nodeaccess_page_form', $form);
  return $output;
}

function theme_nodeaccess_page_form($form) {
  // role table
  $roles = element_children($form['rid']);
  if (count($roles) > 0) {
    $header = array('Role', 'View', 'Edit', 'Delete');
    foreach($roles as $key) {
      $row = array();
      $row[] = $form['rid'][$key]['name']['#value'] . form_render($form['rid'][$key]['name']);
      $row[] = form_render($form['rid'][$key]['grant_view']);
      $row[] = form_render($form['rid'][$key]['grant_update']);
      $row[] = form_render($form['rid'][$key]['grant_delete']);
      $rows[] = $row;
    }
    $output .= theme('table', $header, $rows);
  }

  // search form
  $output .= '<p /><div class="search-form">';
  $output .= '<b>Enter names to search for users:</b>';
  $output .= '<div class="container-inline">';
  $output .= form_render($form['old_keys']);
  $output .= form_render($form['keys']);
  $output .= form_render($form['search']);
  $output .= '</div></div>';

  // user table
  unset($rows);

  $users = element_children($form['uid']);
  if (count($users) > 0) {
    $header = array('User', 'Keep?', 'View', 'Edit', 'Delete');
    foreach($users as $key) {
      $row = array();
      $row[] = form_render($form['uid'][$key]['name']);
      $row[] = form_render($form['uid'][$key]['keep']);
      $row[] = form_render($form['uid'][$key]['grant_view']);
      $row[] = form_render($form['uid'][$key]['grant_update']);
      $row[] = form_render($form['uid'][$key]['grant_delete']);
      $rows[] = $row;
    }
    $output .= theme('table', $header, $rows);
  }
	
  $output .= form_render($form);

  return $output;
}

function nodeaccess_page_form_submit($form_id, $form_values) {	
  global $user;
  $grants = array();

  $nid = $form_values['nid'];
  foreach (array('uid', 'rid') as $type) {
    if (is_array($form_values[$type])) {
      foreach ($form_values[$type] as $gid => $line) {
        $realm = 'nodeaccess_'. $type;
        $grants[$realm][$gid] = array($gid, $realm, $line['grant_view'], $line['grant_update'], $line['grant_delete']);
      }
    } 
  }

  _nodeaccess_save_new($nid, $grants);
  drupal_set_message(t('Grants saved.'));
}

/**
 * Popupate $edit. Loads all roles, gathers uids from node_access and search,
 * and calculates the grants for the users.
 */
function _nodeaccess_populate($nid) {
  $edit = $_POST['edit'];
  //dprint_r($edit);
  // delete what is not kept
  if (is_array($edit['uid'])) {
    foreach ($edit['uid'] as $uid => $row) {
      if (!$row['keep']) {
        unset($edit['uid'][$uid]);
      }
    }
  }
  if (!$edit) {
    $edit = array();
    // load all roles
    $result = db_query("SELECT rid, name, na.* FROM {role} LEFT JOIN {node_access} na ON rid=gid AND realm='%s' AND nid=%d", 'nodeaccess_rid', $nid);
    while ($grant = db_fetch_object($result)) {
      $edit['rid'][$grant->rid] = array('name' => $grant->name, 'grant_view' => $grant->grant_view, 'grant_update' => $grant->grant_update, 'grant_delete' => $grant->grant_delete);
    }
    // load uids from node_access
    $result = db_query("SELECT uid, name FROM {node_access} na LEFT JOIN users ON uid=gid WHERE nid=%d AND realm='%s'", $nid, 'nodeaccess_uid');
    while ($account = db_fetch_object($result)) {
      $edit['uid'][$account->uid] = array('name' =>  $account->name, 'keep' => 1);
    }
  }
  // perform search
  if ($edit['keys'] && $edit['old_keys'] != $edit['keys']) {
    $sql = "SELECT uid, name FROM {users} WHERE name LIKE \"%%%s%%\"";
    $params = array(preg_replace('!\*+!', '%', $edit['keys']));
    if (is_array($edit['uid'])) {
      $sql .= ' AND uid NOT IN (%s)';
      $params[] = implode(',', array_keys($edit['uid']));
    }
    $result = db_query($sql, $params);
    while ($account = db_fetch_object($result)) {
      $edit['uid'][$account->uid] = array('name' =>  $account->name);
    }
  }
  // calculate node grants for users
  if (is_array($edit['uid'])) {
    foreach (array_keys($edit['uid']) as $uid) {
      if (!isset($edit['uid'][$uid]['grant_view'])) {
        foreach (array('grant_view', 'grant_update', 'grant_delete') as $grant_type) {
          $edit['uid'][$uid][$grant_type] = db_num_rows(db_query_range("SELECT * FROM {node_access} na LEFT JOIN {users_roles} r ON na.gid=r.rid WHERE nid=%d AND realm='%s' AND uid=%d AND %s=1", $nid, 'nodeaccess_rid', $uid, $grant_type, 0, 1)) || db_num_rows(db_query_range("SELECT * FROM {node_access} na WHERE nid=%d AND realm='%s' AND gid=%d AND %s=1", $nid, 'nodeaccess_uid', $uid, $grant_type, 0, 1));
        }
      }
    }
  }

  return $edit;
}

function _nodeaccess_save_new($nid, $grants) {
  db_query("DELETE FROM {node_access} WHERE nid=%d AND (realm = 'nodeaccess_uid' or realm = 'nodeaccess_rid')", $nid, implode("','", array_keys($grants)));

  foreach ($grants as $realm) {
    foreach ($realm as $grant) {
      $grant[] = $nid;
      db_query("INSERT INTO {node_access} (gid, realm, grant_view, grant_update, grant_delete, nid) VALUES (%d, '%s', %d, %d, %d, %d)", $grant);
    }
  }
}

/**
 * Save default values where no grant is present
 */
function _nodeaccess_save_default($grants, $where = '', $param = '') {

  $nodes = array();
  $access = array();

  // get a list of all nodes
  $result = db_query("select n.nid from {node} n where $where", $param);
  while ($node = db_fetch_object($result)) {
    $nodes[] = $node->nid;
  }
  
  // get a list of all combinations of access
  $result = db_query("select na.nid, na.gid, na.realm from {node_access} na LEFT JOIN {node} n on na.nid = n.nid where na.realm = 'nodeaccess_rid' AND $where", $param);
  while ($node = db_fetch_object($result)) {
    $access[$node->nid][$node->gid] = 1;
  }

  foreach ($grants as $realm) {
    foreach ($realm as $grant) {
      foreach ($nodes as $nid) {
        $gid = $grant['gid'];
        if (!isset($access[$nid][$gid])) { 
          db_query("INSERT INTO {node_access} (nid, gid, realm, grant_view, grant_update, grant_delete) values($nid, %d, '%s', %d, %d, %d)", $grant);
        }
      }
    }
  } 
}  


function nodeaccess_node_grants($user, $op) {
  global $user;

  $roles = is_array($user->roles) ? array_keys($user->roles) : array(-1);
  return array('nodeaccess_rid' => $roles, 'nodeaccess_uid' => array($user->uid));
}

function nodeaccess_nodeapi(&$node, $op) {
  global $user;

  switch ($op) {
    case 'insert':
    $grants = $user->nodeaccess_defaults ? $user->nodeaccess_defaults : variable_get('nodeaccess_'. $node->type, array());
    _nodeaccess_save_new($node->nid, $grants);
    break;
  case 'delete':
    db_query('DELETE FROM {node_access} WHERE nid=%d', $node->nid);
    break;
  }
}

function nodeaccess_admin() {
  // define our settings form
  // need to set defaults from variable_get
  $show = variable_get('nodeaccess-types', array());
  $roles = user_roles();
  $useroles = variable_get('nodeaccess-roles', array());

  // check if node_access table is set up properly
  $result = db_query("SELECT * FROM {node_access} WHERE nid = 0 AND gid = 0 AND realm = 'all' AND grant_view = 1 AND grant_update = 0 AND grant_delete = 0");
  if (db_num_rows($result) > 0) {
    $enabled = 0;
  } 
  else {
    $enabled = 1;
  }
  $form['enabled'] = array('#type' => 'checkbox', '#title' => 'Enable', '#default_value' => $enabled, '#description' => t('By default, drupal has a node access setting to allow anyone to view any node. Enabling this module will delete this entry. To reset this, uncheck the box and submit this page again.'));

  $form['role'] =  array('#type' => 'fieldset', '#collapsible' => TRUE, '#collapsed' => TRUE, '#title' => t('Allowed Roles'), '#tree' => TRUE, );
  foreach ($roles as $id => $role) {
    $form['role'][$id] = array('#type' => 'checkbox', '#title' => $role, '#default_value' => $useroles[$id]);
  }

  foreach (node_get_types() as $type => $name) {
    $form['nodeaccess'][$type] = array('#type' => 'fieldset',
                                       '#collapsible' => TRUE,
                                       '#collapsed' => TRUE,
                                       '#title' => $name,
                                       '#tree' => TRUE,
                                       '#theme' => 'nodeaccess_admin_fieldset',
                                       );

    $form['nodeaccess'][$type]['show'] = array('#type' => 'checkbox',
                                               '#title' => t('Show grant tab for this node type'),
                                               '#default_value' => $show[$type],
                                               );

    $perms = variable_get('nodeaccess_' . $type, array());
    // go through our roles
    foreach (user_roles() as $id => $role) {
      $form['nodeaccess'][$type]['roles'][$id]['name'] = array('#value' => $role);
      $form['nodeaccess'][$type]['roles'][$id]['grant_view'] = array('#type' => 'checkbox', '#default_value' => $perms['rid'][$id]['grant_view'], );  	                          
      $form['nodeaccess'][$type]['roles'][$id]['grant_update'] = array('#type' => 'checkbox', '#default_value' => $perms['rid'][$id]['grant_update'],);
      $form['nodeaccess'][$type]['roles'][$id]['grant_delete'] = array('#type' => 'checkbox', '#default_value' => $perms['rid'][$id]['grant_delete'], );  	                                             
    }
  }
  $form['submit'] = array('#type' => 'submit', '#value' => t('Save Grants'));
  return drupal_get_form('nodeaccess_admin_settings_form', $form);
}

function theme_nodeaccess_admin_fieldset($form) {
  $output = form_render($form['show']);
  $roles = element_children($form['roles']);
  $header = array('Role', 'View', 'Edit', 'Delete');
  foreach ($roles as $role) {
    $row = array();
    $row[] = form_render($form['roles'][$role]['name']);
    $row[] = form_render($form['roles'][$role]['grant_view']);
    $row[] = form_render($form['roles'][$role]['grant_update']);
    $row[] = form_render($form['roles'][$role]['grant_delete']);
    $rows[] = $row;
  }
  $output .= theme('table', $header, $rows);
  return $output;
}

function nodeaccess_admin_settings_form_submit($form_id, $form_values) {
  // check for enabled
  $result = db_query("SELECT * FROM {node_access} WHERE nid = 0 AND gid = 0 AND realm = 'all' AND grant_view = 1 AND grant_update = 0 AND grant_delete = 0");
  if (db_num_rows($result) > 0) {
    $enabled = 0;
  } 
  else {
    $enabled = 1;
  }
  if ($enabled != $form_values['enabled']) {
    if ($form_values['enabled']) {
      db_query('DELETE FROM {node_access} WHERE nid=0 AND gid=0 AND realm=\'all\'');
    } 
    else {
      db_query("INSERT INTO {node_access} VALUES (0, 0, 'all', 1, 0, 0)");
    }
  }
  
  foreach($form_values['role'] as $id => $val) {
    $pref[$id] = $val;
  }

  variable_set('nodeaccess-roles', $pref);

  foreach(node_get_types() as $type => $name) {
    $grants = variable_get('nodeaccess_' . $type, array());
    $nids = array();
    $result = db_query("SELECT na.nid FROM {node_access} na LEFT JOIN {node} n ON na.nid=n.nid WHERE type='%s'", $type);
    while ($node = db_fetch_object($result)) {
      $nids[] = $node->nid;
    }
    if (!empty($nids) && isset($grants['rid'])) {
      foreach ($grants['rid'] as $grant) {
        $grant[] = implode(',', $nids);
        db_query("DELETE FROM {node_access} WHERE gid=%d AND realm='%s' AND grant_view=%d AND grant_update=%d AND grant_delete=%d AND nid IN (%s)", $grant);
      }
    }
    $grants = array();
    // update grants
    foreach ($form_values[$type]['roles'] as $role => $val) {
      $grants['rid'][$role] = array($role, 'nodeaccess_rid', 'grant_view' => $val['grant_view'], 'grant_update' => $val['grant_update'], 'grant_delete' => $val['grant_delete']);
    }
    variable_set('nodeaccess_' . $type, $grants);
    _nodeaccess_save_default($grants, "n.type='%s'", $type);
    if ($form_values[$type]['show']) {	
      $showing[$type] = 1;
    } 
    else {
      $showing[$type] = 0;
    }
  }

  variable_set('nodeaccess-types', $showing);

  drupal_set_message('Grants Saved', 'status');
}
?>
